package <your-package>;

unit DepositUnit;

import com.ibm.edu.bamoe.labs.model.Deposit;
import com.ibm.edu.bamoe.labs.model.AllAmounts;

rule SmallDepositApprove when
    $d: /deposits[ customer.age >= 20, deposit < 1000, amount <= 2000 ]
then
    modify($d) { setApproved(true) };
end

rule SmallDepositReject when
    $d: /deposits[ customer.age >= 20, deposit < 1000, amount > 2000 ]
then
    modify($d) { setApproved(false) };
end

rule LargeDepositApprove when
    $d: /deposits[ customer.age >= 20, deposit >= 1000, amount <= maxAmount ]
then
    modify($d) { setApproved(true) };
end

rule LargeDepositReject when
    $d: /deposits[ customer.age >= 20, deposit >= 1000, amount > maxAmount ]
then
    modify($d) { setApproved(false) };
end

rule NotAdultApplication when
    $d: /deposits[ customer.age < 20 ]
then
    modify($d) { setApproved(false) };
end

query FindApproved
    $d: /deposits[ approved ]
end

query FindNotApprovedIdAndAmount
    /deposits[ !approved, $id: id, $amount : amount ]
end

rule AllAmounts
when
    accumulate ( $a : /deposits ; $sum : sum($a.amount))
then
    allAmounts.add(new AllAmounts($sum));
end

query FindAllDepositAmounts
    $a : /allAmounts
end
